name: Docker Workflow Githubb

on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/docker.yml      
      - "/**"

env:
  AWS_REGION: us-east-1                
  ENV: "master"
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Image Productions 
    runs-on: ubuntu-latest
    environment: Production
    steps:    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login ecr
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build ECR Prod
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nodejs-images
        NODEJS_IMAGE_TAG: nodejs-${{ env.ENV }}-latest
      run: |
        sudo apt update
        sudo apt install docker-ce -y
        docker --version
              
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$NODEJS_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NODEJS_IMAGE_TAG
        echo "::set-output name=nodejs_image::$ECR_REGISTRY/$ECR_REPOSITORY:$NODEJS_IMAGE_TAG"

    - name: Create Dockerrun.aws.json
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nodejs-images
        NODEJS_IMAGE_TAG: nodejs-${{ env.ENV }}-latest   
      run: |
        cat <<EOF > Dockerrun.aws.json
        {
            "AWSEBDockerrunVersion": "1",
            "Image": {
                "Name": "$ECR_REGISTRY/$ECR_REPOSITORY:$NODEJS_IMAGE_TAG",
                "Update": "true"
            },
            "Ports": [
                {
                    "ContainerPort": 8000,
                    "HostPort": 80
                }
            ]
        }
        EOF
            
    - name: Build zip
      run: zip nodejsdocker.zip Dockerrun.aws.json

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: nodejsdocker
        path: nodejsdocker.zip

    - name: Upload to S3
      run: |
        aws s3 cp nodejsdocker.zip s3://${{ secrets.S3_BUCKET_NAME }}/nodejsdocker.zip

    - name: End Build
      run: echo "Build Success"

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: nodejsdocker
    
    - name: Deploy to Elastic Beanstalk
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}      
          EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
          EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
          ZIP_FILE: "nodejsdocker.zip"
      run: |
        VERSION_LABEL="${{ github.sha }}-$(date +%s)"
        aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --version-label $VERSION_LABEL \
          --source-bundle S3Bucket=${{ secrets.S3_BUCKET_NAME }},S3Key=nodejsdocker.zip
        aws elasticbeanstalk update-environment \
          --environment-name ${{ secrets.EB_ENV_NAME }} \
          --version-label $VERSION_LABEL
            